{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Notification.js","services/persons.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","searchTerm","database","handleChange","console","log","searchResult","filter","person","name","toLowerCase","type","value","onChange","map","number","PersonForm","onFormSubmit","personName","personNameChange","personNumber","personNumberChange","onSubmit","Notificiation","className","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Persons","removePerson","showNotification","key","onClick","window","confirm","personService","catch","handleDelete","App","useState","persons","setPersons","filteredPersons","setFilteredPersons","notification","setNotification","useEffect","initialData","setTimeout","newName","setNewName","newNumber","setNewNumber","search","setSearch","Notification","e","target","preventDefault","newPerson","ifPersonExist","some","existPerson","find","changedPerson","p","updatePerson","error","concat","addPerson","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d84cec0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    const { searchTerm, database, handleChange } = props;\r\n    console.log(props);\r\n    const searchResult = database.filter(person => (person.name).toLowerCase() === (searchTerm).toLowerCase());\r\n    //const searchResult = database.filter (data => (data.name).toLowerCase() === searchTerm);\r\n\r\n    return (\r\n        <div>\r\n         Filter shown with:    \r\n         <input  \r\n            type='text' \r\n            value={searchTerm} \r\n            onChange={handleChange}\r\n         />\r\n         <div>\r\n        Result:    \r\n          \r\n        {searchResult.map(person => <p>{person.name}  {person.number}</p>)}       \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    const { onFormSubmit, personName, personNameChange, personNumber, personNumberChange } = props;\r\n    return (\r\n     <div>\r\n        <form onSubmit={onFormSubmit}>\r\n         <div>\r\n            name: \r\n            <input  \r\n                type='text' \r\n                value={personName} \r\n                onChange={personNameChange}/>\r\n          </div>\r\n          <div>  \r\n            number: \r\n            <input \r\n                type='text'\r\n                value={personNumber}\r\n                onChange={personNumberChange} />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n            \r\n     </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Notificiation = (props) => {\r\nconst { message } = props;\r\nlet className;\r\n\r\nswitch (message.type) {\r\n  case 'success': className='success'; break;\r\n  case 'fail': className='error'; break;\r\n  default: className='default'; break;\r\n}\r\n\r\nif (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={className}>\r\n      {message.message}\r\n    </div>\r\n  )\r\n}\r\nexport default Notificiation\r\n","import axios from 'axios';\r\n\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\n// added proxy \"proxy\": \"http://localhost:3001\"  in package.json\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  const remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nexport default {  getAll, create, update, remove }\r\n  /* getAll: getAll, \r\n  create: create, \r\n  update: update,  */\r\n \r\n","import React from 'react'\r\nimport personService from '../services/persons'\r\nconst Persons = (props) => {\r\n    const { database, removePerson, showNotification } = props;\r\n    const handleDelete = (person) =>{\r\n      if (window.confirm(`Are you sure you want to delete ${person.name}`)) {\r\n      personService\r\n      .remove(person.id)\r\n      .then( response =>{\r\n        removePerson(person.id)        \r\n      }) \r\n      .catch(showNotification(`Person ${person.name} not found!`, 'fail'))   \r\n     }\r\n    }\r\n    return (\r\n        <div>\r\n          <ul>\r\n            {database.map(person => <li key = {person.id}>{person.name}  {person.number} <button onClick={()=> handleDelete(person) }>delete</button></li>)}\r\n          </ul>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons\r\n","// Phonebook frontend run frontend server by npm start\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Filter from './components/Filter';\r\nimport PersonForm  from './components/PersonForm';\r\nimport Notification from './components/Notification';\r\nimport Persons from './components/Persons';\r\n//import axios from 'axios';\r\nimport personService from './services/persons';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]); \r\n  const [ filteredPersons, setFilteredPersons ] = useState(persons);\r\n  const [notification, setNotification] = useState({'message': '', 'type': ''})\r\n  \r\n          /* useEffect(() => {\r\n          console.log('effect')\r\n          axios\r\n            .get('http://localhost:3001/persons')\r\n            .then(response => {\r\n              console.log('promise fulfilled')\r\n              setPersons(response.data)\r\n            })\r\n          }, []) */\r\n\r\n  useEffect(()=>{\r\n    personService\r\n    .getAll()\r\n    .then(initialData => {\r\n       setPersons(initialData)\r\n       setFilteredPersons(initialData)\r\n    })\r\n  },[])\r\n\r\n  const removePerson = (id) =>{\r\n    setPersons(persons.filter(p => p.id !== id))\r\n    setFilteredPersons(persons.filter(p => p.id !== id))\r\n  }\r\n  const addPerson = (newPerson) =>{\r\n    setPersons(persons.concat(newPerson))\r\n    setFilteredPersons(persons.concat(newPerson))\r\n  }\r\n  const updatePerson = (existPerson) =>{\r\n    setPersons(persons.map( p => p.id !== existPerson.id ? p : existPerson))\r\n    setFilteredPersons(persons.map( p => p.id !== existPerson.id ? p : existPerson))\r\n  }\r\n  const showNotification = (message, type)=>{\r\n    setNotification({'message': message, 'type': type})\r\n    setTimeout(() => {\r\n      setNotification({'message': '', 'type': ''})\r\n    }, 3000)\r\n  }\r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ search, setSearch ] = useState('');\r\n\r\n  const handleFormSubmit = (e) =>{\r\n    e.preventDefault();\r\n    const newPerson = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n          // array.some() method checks if there is at least one value in an array that matches criteria and returns a boolean\r\n    const ifPersonExist = persons.some(person => person.name === newName); //gives boolean\r\n    const existPerson = persons.find(person => person.name === newName); // gives object\r\n    const changedPerson = {...existPerson, name:newName, number:newNumber}\r\n\r\n    if ( ifPersonExist) \r\n      // alert(`${newName} is already added to phonebook`)\r\n\r\n      {\r\n        if (window.confirm(`${newPerson.name} is already added to phonebook. Do you want to replace the old number with ${newPerson.number}?`))\r\n         {\r\n          \r\n          personService\r\n              .update( existPerson.id, changedPerson )\r\n              .then( data =>{\r\n                updatePerson(data)\r\n                setNewName('')\r\n                setNewNumber('')\r\n              })\r\n              .catch(error => {\r\n                showNotification(`Person ${newPerson.name} not found!${error.response.data.error}`, 'fail')}) \r\n         }\r\n      }\r\n    else \r\n                          /* setPersons(persons.concat(newPerson));\r\n                        console.log(newPerson);\r\n                        setNewName('');\r\n                        setNewNumber('');\r\n                        //console.log(ifPersonExist)\r\n                    */\r\n\r\n        personService\r\n        .create(newPerson)\r\n        .then(response => {\r\n          addPerson(newPerson)\r\n          showNotification( newPerson ? `Added ${newName}` : `Updated ${newName}`, 'success')\r\n          setNewName('')\r\n          setNewNumber('')\r\n        })\r\n        .catch(error => {showNotification(`Person ${newPerson.name} can not added!${error.response.data.error}`, 'fail')})\r\n  }\r\n  const handleNameChange = (e) => {\r\n    //console.log(e.target.value)\r\n    setNewName(e.target.value);\r\n  }\r\n  const handleNumberChange = (e) =>{\r\n    //console.log(e.target.value)\r\n    setNewNumber(e.target.value);\r\n  }\r\n  const handleSearchChange = (e) =>{\r\n    setSearch(e.target.value);\r\n  }\r\n  \r\n  //console.log(searchResult)\r\n\r\n  return (\r\n    <div>\r\n      {/* <p>notes : start your db server: npm run server (to run server on port 3001 and file is db.json)\r\n         <br/>second start your app server : npm start (to run app on server 3000)\r\n         <br/> see your data at http://localhost:3001/persons </p>\r\n */}\r\n      <h2>Phonebook</h2>\r\n      <Notification message={notification} />\r\n\r\n      <Filter \r\n       searchTerm={search}\r\n       database={persons}\r\n       handleChange={handleSearchChange}\r\n       />\r\n\r\n      <h3>Add a new</h3>\r\n\r\n      <PersonForm  \r\n       onFormSubmit={handleFormSubmit}\r\n       personName={newName}\r\n       personNameChange={handleNameChange}\r\n       personNumber={newNumber}\r\n       personNumberChange={handleNumberChange}\r\n       />\r\n\r\n      <h3>Numbers</h3>\r\n\r\n      <Persons \r\n       database={filteredPersons}\r\n       removePerson={removePerson}\r\n       showNotification={showNotification}\r\n       />\r\n    </div>\r\n  )\r\n}\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}